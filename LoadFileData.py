import streamlit as st
import pandas as pd
import os

# Routine per caricare file dati unico e separare le due sezioni "General Data" e
# "Piping Data" generando i rispettivi CSV sotto files.
def loadData():

    # Funzione per verificare se il file è stato generato da "HeatLoss4"
    def verifica_file(df):

        if 'DatiCaricati' not in st.session_state:
            st.session_state.DatiCaricati = False
            
        # Trova la colonna che contiene il titolo della app
        
        colonna_heatloss = [col for col in df.columns if "PiCa1" in col]
        
        print ("colonna Pica1", colonna_heatloss)
        if len(colonna_heatloss) == 0:
            # Se non trova la colonna, significa che il file non è stato generato correttamente
            st.warning("File not generated by PiCa1.")
            return None
        else:
            # Estrarre la data e l'ora dalla colonna
            colonna_info = colonna_heatloss[0]
            st.success(f"File correctly generated by PiCa1.")
            
            # Estrai la data e l'ora dal nome della colonna
            data_ora = colonna_info.split(' - ')[1]
            st.write(f"Creation Date & Time: {data_ora}")
            return data_ora

    # Funzione per separare i dati in base alla colonna che contiene "PiCa1"
    def separa_dati(df):
        # Trova l'indice della colonna che contiene "HeatLoss4"
        
        colonne_heatloss = [col for col in df.columns if "PiCa1" in col]
        colonna_sep1 = [col for col in df.columns if "separator_1" in col]
        colonna_sep2 = [col for col in df.columns if "separator_2" in col]
        colonna_sep3 = [col for col in df.columns if "separator_3" in col]

        
        if len(colonne_heatloss) == 0:
            st.error("No reference to PiCa1 app has been found.")
            return None, None, None
        
        colonna_heatloss_idx = colonne_heatloss[0]  # Nome della colonna "PiCa1"
        idx = df.columns.get_loc(colonna_heatloss_idx)  # Ottieni l'indice numerico della colonna
        idx_sep1 = df.columns.get_loc(colonna_sep1[0])
        idx_sep2 = df.columns.get_loc(colonna_sep2[0])
        idx_sep3 = df.columns.get_loc(colonna_sep3[0])

        #print ("indice colonna PiCa1", idx)
        #print ("indice colonna sep1", idx_sep1)
        #print ("indice colonna sep2", idx_sep2)
        #print ("indice colonna sep3", idx_sep3)

        # Separa i tre set di dati
        dati_generali = df.iloc[:, idx+1:idx_sep1].dropna(how='all')  # Dati fino alla colonna PiCa1
        dati_piping = df.iloc[:, idx_sep1+1: idx_sep2].dropna(how='all')  # Dati dopo sep1 e prima di sep2
        dati_components = df.iloc[:, idx_sep2+1: idx_sep3].dropna(how='all')  # Dati dopo sep2 e prima di sep3
        dati_temperatures = df.iloc[:, idx_sep3+1: ].dropna(how='all')  # Dati dopo sep3

        if "Rating" in dati_components.columns:
            dati_components["Rating"] = (
            pd.to_numeric(dati_components["Rating"], errors="coerce")
            .dropna()
            .astype(int)
            )

        return dati_generali, dati_piping, dati_components, dati_temperatures

    # Carica il file unito tramite uploader
    uploaded_file = st.file_uploader("Select a valid PiCa1 data file", type="csv")

    if uploaded_file is not None:
        # Leggi il file caricato in un DataFrame
        df_unito = pd.read_csv(uploaded_file)
                
        # Verifica se il file è stato generato dalla app che si sta utilizzando
        #     
        data_ora = verifica_file(df_unito)
    
        if data_ora:
            # Mostra un'anteprima del file solo se la verifica è andata a buon fine
            #st.write("Single File:")
            #st.dataframe(df_unito)

            # Separa i dati
            dati_generali, dati_piping, dati_components, dati_temperatures = separa_dati(df_unito)
            
            if dati_generali is not None and dati_piping is not None:
                st.session_state.DatiCaricati = True
                dati_generali_vis = dati_generali.loc[:, ~dati_generali.columns.str.contains('^Unnamed')]
                dati_piping_vis = dati_piping.loc[:, ~dati_piping.columns.str.contains('^Unnamed')]
                dati_components_vis = dati_components.loc[:, ~dati_components.columns.str.contains('^Unnamed')]
                dati_temperatures_vis = dati_temperatures.loc[:, ~dati_temperatures.columns.str.contains('^Unnamed')]
                
                # Mostra un'anteprima dei dati separati
                st.write("General Data:")
                st.dataframe(dati_generali_vis)
                
                st.write("Piping Data:")
                st.dataframe(dati_piping_vis)

                st.write("Components Data:")
                st.dataframe(dati_components_vis)

                st.write("Temperatures Data:")
                st.dataframe(dati_temperatures_vis) 
                
                # Salva i file CSV localmente o su un percorso remoto
                # In questo esempio, i file vengono salvati localmente

                sessionDir = "sessions"

                               
                fileDatiGenerali = os.path.join(sessionDir, f"DatiGenerali_{st.session_state.session_id}.csv")
                filePipingGroups = os.path.join(sessionDir, f"piping_groups_{st.session_state.session_id}.csv")
                fileComponentGroups = os.path.join(sessionDir, f"comp_groups_{st.session_state.session_id}.csv")
                fileTemperatures = os.path.join(sessionDir, f"Temperatures_{st.session_state.session_id}.csv")
                
                dati_generali.to_csv(fileDatiGenerali, index=False)
                dati_piping.to_csv(filePipingGroups, index=False)
                dati_components.to_csv(fileComponentGroups, index=False)
                dati_temperatures.to_csv(fileTemperatures, index=False, sep=";", decimal=",")
                
                st.success("General, Piping & Components Data, Temperatures loaded successfully!")


